[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial source changes: [0m
[0m[[0m[0mdebug[0m] [0m[0m	removed:Set(/home/enrico/Git/csp/svmacros/src/main/scala/csp/Constraint.scala, /home/enrico/Git/csp/svmacros/src/main/scala/csp/CSP.scala, /home/enrico/Git/csp/svmacros/src/main/scala/sv/SVEnumeration.scala, /home/enrico/Git/csp/svmacros/src/main/scala/csp/Assignments.scala, /home/enrico/Git/csp/svmacros/src/main/scala/csp/Solver.scala, /home/enrico/Git/csp/svmacros/src/main/scala/sv/Random.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	added: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	modified: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated products: Set(/home/enrico/Git/csp/svmacros/target/scala-2.13/classes/csp/Unary.class, /home/enrico/Git/csp/svmacros/target/scala-2.13/classes/csp/Variable.class, /home/enrico/Git/csp/svmacros/target/scala-2.13/classes/csp/Assignments$.class, /home/enrico/Git/csp/svmacros/target/scala-2.13/classes/csp/Solution$.class, /home/enrico/Git/csp/svmacros/target/scala-2.13/classes/csp/Domain.class, /home/enrico/Git/csp/svmacros/target/scala-2.13/classes/sv/Random$ConstraintBlock.class, /home/enrico/Git/csp/svmacros/target/scala-2.13/classes/csp/Binary$.class, /home/enrico/Git/csp/svmacros/target/scala-2.13/classes/csp/Assignments.class, /home/enrico/Git/csp/svmacros/target/scala-2.13/classes/sv/RandomMacros$$typecreator2$1.class, /home/enrico/Git/csp/svmacros/target/scala-2.13/classes/csp/Constraint.class, /home/enrico/Git/csp/svmacros/target/scala-2.13/classes/csp/Solution.class, /home/enrico/Git/csp/svmacros/target/scala-2.13/classes/csp/CSP.class, /home/enrico/Git/csp/svmacros/target/scala-2.13/classes/sv/SVEnumeration.class, /home/enrico/Git/csp/svmacros/target/scala-2.13/classes/sv/Random.class, /home/enrico/Git/csp/svmacros/target/scala-2.13/classes/sv/RandomMacros$.class, /home/enrico/Git/csp/svmacros/target/scala-2.13/classes/csp/Variable$.class, /home/enrico/Git/csp/svmacros/target/scala-2.13/classes/sv/Random$.class, /home/enrico/Git/csp/svmacros/target/scala-2.13/classes/sv/RandomMacros.class, /home/enrico/Git/csp/svmacros/target/scala-2.13/classes/csp/Unary$.class, /home/enrico/Git/csp/svmacros/target/scala-2.13/classes/csp/Domain$.class, /home/enrico/Git/csp/svmacros/target/scala-2.13/classes/csp/Node.class, /home/enrico/Git/csp/svmacros/target/scala-2.13/classes/sv/RandomMacros$$treecreator1$1.class, /home/enrico/Git/csp/svmacros/target/scala-2.13/classes/csp/Binary.class)[0m
[0m[[0m[0mdebug[0m] [0m[0mExternal API changes: API Changes: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mModified binary dependencies: Set(/home/enrico/Git/csp/target/scala-2.13/classes)[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial directly invalidated classes: Set(csp.Binary, csp.Constraint, csp.Assignments, sv.RandomMacros, csp.Solution, csp.Variable, csp.Unary, csp.CSP, sv.SVEnumeration, csp.Node, csp.Domain, sv.Random, sv.Random.ConstraintBlock)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mSources indirectly invalidated by:[0m
[0m[[0m[0mdebug[0m] [0m[0m	product: Set(/home/enrico/Git/csp/svmacros/src/main/scala/csp/Constraint.scala, /home/enrico/Git/csp/svmacros/src/main/scala/csp/CSP.scala, /home/enrico/Git/csp/svmacros/src/main/scala/sv/SVEnumeration.scala, /home/enrico/Git/csp/svmacros/src/main/scala/csp/Assignments.scala, /home/enrico/Git/csp/svmacros/src/main/scala/csp/Solver.scala, /home/enrico/Git/csp/svmacros/src/main/scala/sv/Random.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	binary dep: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	external source: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated classes: Set(csp.Binary, csp.Constraint, csp.Assignments, sv.RandomMacros, csp.Solution, csp.Variable, csp.Unary, csp.CSP, sv.SVEnumeration, csp.Node, csp.Domain, sv.Random, sv.Random.ConstraintBlock)[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated sources:Set(/home/enrico/Git/csp/svmacros/src/main/scala/csp/Constraint.scala, /home/enrico/Git/csp/svmacros/src/main/scala/csp/CSP.scala, /home/enrico/Git/csp/svmacros/src/main/scala/sv/SVEnumeration.scala, /home/enrico/Git/csp/svmacros/src/main/scala/csp/Assignments.scala, /home/enrico/Git/csp/svmacros/src/main/scala/csp/Solver.scala, /home/enrico/Git/csp/svmacros/src/main/scala/sv/Random.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: csp.Binary, csp.Constraint, csp.Assignments, sv.RandomMacros, csp.Solution, csp.Variable, csp.Unary, csp.CSP, sv.SVEnumeration, csp.Node, csp.Domain, sv.Random, sv.Random.ConstraintBlock[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding csp.Unary by csp.Constraint[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding csp.Node by csp.Solution[0m
[0m[[0m[0mdebug[0m] [0m[0mRecompiling all sources: number of invalidated sources > 50.0% of all sources[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from sv.Random...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: sv.Random[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(sv.Random)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange APIChangeDueToMacroDefinition(sv.Random) invalidates 1 classes due to The sv.Random source file declares a macro.[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(sv.Random)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from csp.Variable...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: csp.Variable[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(csp.Variable)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(csp.Variable,ModifiedNames(changes = UsedName(unapply,[Default]), UsedName(notify,[Default]), UsedName(!=,[Default]), UsedName(hashCode,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(inside,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(csp;Variable;init;,[Default]), UsedName(eq,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(name,[Default]), UsedName(synchronized,[Default]), UsedName(andThen,[Default]), UsedName(productElement,[Default]), UsedName(productElementName,[Default]), UsedName(copy$default$1,[Default]), UsedName(finalize,[Default]), UsedName(toString,[Default]), UsedName(apply,[Default]), UsedName(productIterator,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(copy,[Default]), UsedName(productPrefix,[Default]), UsedName(compose,[Default]), UsedName(canEqual,[Default]), UsedName(##,[Default]), UsedName(Variable,[Default]), UsedName(productArity,[Default]))) invalidates 1 classes due to The csp.Variable has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(unapply,[Default]), UsedName(notify,[Default]), UsedName(!=,[Default]), UsedName(hashCode,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(inside,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(csp;Variable;init;,[Default]), UsedName(eq,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(name,[Default]), UsedName(synchronized,[Default]), UsedName(andThen,[Default]), UsedName(productElement,[Default]), UsedName(productElementName,[Default]), UsedName(copy$default$1,[Default]), UsedName(finalize,[Default]), UsedName(toString,[Default]), UsedName(apply,[Default]), UsedName(productIterator,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(copy,[Default]), UsedName(productPrefix,[Default]), UsedName(compose,[Default]), UsedName(canEqual,[Default]), UsedName(##,[Default]), UsedName(Variable,[Default]), UsedName(productArity,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(csp.Variable)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from csp.Binary...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: csp.Binary[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(csp.Binary)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(csp.Binary,ModifiedNames(changes = UsedName(unapply,[Default]), UsedName(copy$default$2,[Default]), UsedName(notify,[Default]), UsedName(!=,[Default]), UsedName(hashCode,[Default]), UsedName(var1,[Default]), UsedName($init$,[Default]), UsedName(relatesTo,[Default]), UsedName(var2,[Default]), UsedName(productElementNames,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(isSatisfied,[Default]), UsedName(notifyAll,[Default]), UsedName(synchronized,[Default]), UsedName(getOther,[Default]), UsedName(productElement,[Default]), UsedName(productElementName,[Default]), UsedName(copy$default$1,[Default]), UsedName(csp;Binary;init;,[Default]), UsedName(neighbor,[Default]), UsedName(finalize,[Default]), UsedName(isUnary,[Default]), UsedName(toString,[Default]), UsedName(apply,[Default]), UsedName(isConsistent,[Default]), UsedName(tupled,[Default]), UsedName(productIterator,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(copy,[Default]), UsedName(Binary,[Default]), UsedName(productPrefix,[Default]), UsedName(relatesToVar,[Default]), UsedName(curried,[Default]), UsedName(canEqual,[Default]), UsedName(##,[Default]), UsedName(copy$default$3,[Default]), UsedName(fun,[Default]), UsedName(productArity,[Default]))) invalidates 1 classes due to The csp.Binary has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(unapply,[Default]), UsedName(copy$default$2,[Default]), UsedName(notify,[Default]), UsedName(!=,[Default]), UsedName(hashCode,[Default]), UsedName(var1,[Default]), UsedName($init$,[Default]), UsedName(relatesTo,[Default]), UsedName(var2,[Default]), UsedName(productElementNames,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(isSatisfied,[Default]), UsedName(notifyAll,[Default]), UsedName(synchronized,[Default]), UsedName(getOther,[Default]), UsedName(productElement,[Default]), UsedName(productElementName,[Default]), UsedName(copy$default$1,[Default]), UsedName(csp;Binary;init;,[Default]), UsedName(neighbor,[Default]), UsedName(finalize,[Default]), UsedName(isUnary,[Default]), UsedName(toString,[Default]), UsedName(apply,[Default]), UsedName(isConsistent,[Default]), UsedName(tupled,[Default]), UsedName(productIterator,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(copy,[Default]), UsedName(Binary,[Default]), UsedName(productPrefix,[Default]), UsedName(relatesToVar,[Default]), UsedName(curried,[Default]), UsedName(canEqual,[Default]), UsedName(##,[Default]), UsedName(copy$default$3,[Default]), UsedName(fun,[Default]), UsedName(productArity,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(csp.Binary)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from csp.Assignments...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: csp.Assignments[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(csp.Assignments)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(csp.Assignments,ModifiedNames(changes = UsedName(unapply,[Default]), UsedName(apply$default$1,[Default]), UsedName(notify,[Default]), UsedName(isPartial,[Default]), UsedName(!=,[Default]), UsedName(hashCode,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(assigned,[Default]), UsedName(mapVarValue,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(isComplete,[Default]), UsedName(addValue,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(synchronized,[Default]), UsedName(andThen,[Default]), UsedName(productElement,[Default]), UsedName(productElementName,[Default]), UsedName(copy$default$1,[Default]), UsedName(finalize,[Default]), UsedName(csp;Assignments;init;,[Default]), UsedName(<init>$default$1,[Default]), UsedName(toString,[Default]), UsedName(apply,[Default]), UsedName(productIterator,[Default]), UsedName(Assignments,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(copy,[Default]), UsedName(productPrefix,[Default]), UsedName(compose,[Default]), UsedName(areAssigned,[Default]), UsedName(canEqual,[Default]), UsedName(getUnassignedVariable,[Default]), UsedName(##,[Default]), UsedName(getUnassignedVariable$default$2,[Default]), UsedName(productArity,[Default]))) invalidates 1 classes due to The csp.Assignments has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(unapply,[Default]), UsedName(apply$default$1,[Default]), UsedName(notify,[Default]), UsedName(isPartial,[Default]), UsedName(!=,[Default]), UsedName(hashCode,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(assigned,[Default]), UsedName(mapVarValue,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(isComplete,[Default]), UsedName(addValue,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(synchronized,[Default]), UsedName(andThen,[Default]), UsedName(productElement,[Default]), UsedName(productElementName,[Default]), UsedName(copy$default$1,[Default]), UsedName(finalize,[Default]), UsedName(csp;Assignments;init;,[Default]), UsedName(<init>$default$1,[Default]), UsedName(toString,[Default]), UsedName(apply,[Default]), UsedName(productIterator,[Default]), UsedName(Assignments,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(copy,[Default]), UsedName(productPrefix,[Default]), UsedName(compose,[Default]), UsedName(areAssigned,[Default]), UsedName(canEqual,[Default]), UsedName(getUnassignedVariable,[Default]), UsedName(##,[Default]), UsedName(getUnassignedVariable$default$2,[Default]), UsedName(productArity,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(csp.Assignments)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from csp.Node...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: csp.Node[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(csp.Node)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(csp.Node,ModifiedNames(changes = UsedName(notify,[Default]), UsedName(!=,[Default]), UsedName(hashCode,[Default]), UsedName(orderDomainValues,[Default]), UsedName($init$,[Default]), UsedName(backtrackingSearch,[Default]), UsedName(MAC,[Default]), UsedName(children,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(Node,[Default]), UsedName(eq,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(synchronized,[Default]), UsedName(AC_3,[Default]), UsedName(finalize,[Default]), UsedName(toString,[Default]), UsedName(backtrack,[Default]), UsedName(isArcConsistent,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(selectUnassignedVar,[Default]), UsedName(inference,[Default]), UsedName(##,[Default]), UsedName(revise,[Default]))) invalidates 1 classes due to The csp.Node has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(notify,[Default]), UsedName(!=,[Default]), UsedName(hashCode,[Default]), UsedName(orderDomainValues,[Default]), UsedName($init$,[Default]), UsedName(backtrackingSearch,[Default]), UsedName(MAC,[Default]), UsedName(children,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(Node,[Default]), UsedName(eq,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(synchronized,[Default]), UsedName(AC_3,[Default]), UsedName(finalize,[Default]), UsedName(toString,[Default]), UsedName(backtrack,[Default]), UsedName(isArcConsistent,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(selectUnassignedVar,[Default]), UsedName(inference,[Default]), UsedName(##,[Default]), UsedName(revise,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(csp.Node)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from csp.Constraint...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: csp.Constraint[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(csp.Constraint)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(csp.Constraint,ModifiedNames(changes = UsedName(notify,[Default]), UsedName(!=,[Default]), UsedName(hashCode,[Default]), UsedName(relatesTo,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(isSatisfied,[Default]), UsedName(notifyAll,[Default]), UsedName(synchronized,[Default]), UsedName(getOther,[Default]), UsedName(neighbor,[Default]), UsedName(finalize,[Default]), UsedName(isUnary,[Default]), UsedName(toString,[Default]), UsedName(isConsistent,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(Constraint,[Default]), UsedName(relatesToVar,[Default]), UsedName(##,[Default]))) invalidates 1 classes due to The csp.Constraint has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(notify,[Default]), UsedName(!=,[Default]), UsedName(hashCode,[Default]), UsedName(relatesTo,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(isSatisfied,[Default]), UsedName(notifyAll,[Default]), UsedName(synchronized,[Default]), UsedName(getOther,[Default]), UsedName(neighbor,[Default]), UsedName(finalize,[Default]), UsedName(isUnary,[Default]), UsedName(toString,[Default]), UsedName(isConsistent,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(Constraint,[Default]), UsedName(relatesToVar,[Default]), UsedName(##,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(csp.Constraint)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from sv.RandomMacros...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: sv.RandomMacros[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(sv.RandomMacros)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(sv.RandomMacros,ModifiedNames(changes = UsedName(notify,[Default]), UsedName(randArray,[Default]), UsedName(!=,[Default]), UsedName(hashCode,[Default]), UsedName(svrandomMacroImpl,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(synchronized,[Default]), UsedName(svrandcImpl,[Default]), UsedName(finalize,[Default]), UsedName(toString,[Default]), UsedName(randDec,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(RandomMacros,[Default]), UsedName(##,[Default]), UsedName(randInt,[Default]))) invalidates 1 classes due to The sv.RandomMacros has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(notify,[Default]), UsedName(randArray,[Default]), UsedName(!=,[Default]), UsedName(hashCode,[Default]), UsedName(svrandomMacroImpl,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(synchronized,[Default]), UsedName(svrandcImpl,[Default]), UsedName(finalize,[Default]), UsedName(toString,[Default]), UsedName(randDec,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(RandomMacros,[Default]), UsedName(##,[Default]), UsedName(randInt,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(sv.RandomMacros)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from csp.Unary...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: csp.Unary[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(csp.Unary)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(csp.Unary,ModifiedNames(changes = UsedName(unapply,[Default]), UsedName(copy$default$2,[Default]), UsedName(notify,[Default]), UsedName(!=,[Default]), UsedName(hashCode,[Default]), UsedName(var1,[Default]), UsedName($init$,[Default]), UsedName(relatesTo,[Default]), UsedName(productElementNames,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(isSatisfied,[Default]), UsedName(notifyAll,[Default]), UsedName(synchronized,[Default]), UsedName(getOther,[Default]), UsedName(productElement,[Default]), UsedName(productElementName,[Default]), UsedName(copy$default$1,[Default]), UsedName(neighbor,[Default]), UsedName(finalize,[Default]), UsedName(isUnary,[Default]), UsedName(toString,[Default]), UsedName(apply,[Default]), UsedName(isConsistent,[Default]), UsedName(tupled,[Default]), UsedName(productIterator,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(copy,[Default]), UsedName(productPrefix,[Default]), UsedName(csp;Unary;init;,[Default]), UsedName(relatesToVar,[Default]), UsedName(curried,[Default]), UsedName(canEqual,[Default]), UsedName(##,[Default]), UsedName(fun,[Default]), UsedName(Unary,[Default]), UsedName(productArity,[Default]))) invalidates 1 classes due to The csp.Unary has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(unapply,[Default]), UsedName(copy$default$2,[Default]), UsedName(notify,[Default]), UsedName(!=,[Default]), UsedName(hashCode,[Default]), UsedName(var1,[Default]), UsedName($init$,[Default]), UsedName(relatesTo,[Default]), UsedName(productElementNames,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(isSatisfied,[Default]), UsedName(notifyAll,[Default]), UsedName(synchronized,[Default]), UsedName(getOther,[Default]), UsedName(productElement,[Default]), UsedName(productElementName,[Default]), UsedName(copy$default$1,[Default]), UsedName(neighbor,[Default]), UsedName(finalize,[Default]), UsedName(isUnary,[Default]), UsedName(toString,[Default]), UsedName(apply,[Default]), UsedName(isConsistent,[Default]), UsedName(tupled,[Default]), UsedName(productIterator,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(copy,[Default]), UsedName(productPrefix,[Default]), UsedName(csp;Unary;init;,[Default]), UsedName(relatesToVar,[Default]), UsedName(curried,[Default]), UsedName(canEqual,[Default]), UsedName(##,[Default]), UsedName(fun,[Default]), UsedName(Unary,[Default]), UsedName(productArity,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(csp.Unary)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from csp.Domain...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: csp.Domain[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(csp.Domain)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(csp.Domain,ModifiedNames(changes = UsedName(unapply,[Default]), UsedName(notify,[Default]), UsedName(!=,[Default]), UsedName(hashCode,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(synchronized,[Default]), UsedName(andThen,[Default]), UsedName(productElement,[Default]), UsedName(productElementName,[Default]), UsedName(copy$default$1,[Default]), UsedName(finalize,[Default]), UsedName(Domain,[Default]), UsedName(toString,[Default]), UsedName(apply,[Default]), UsedName(productIterator,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(values,[Default]), UsedName(copy,[Default]), UsedName(productPrefix,[Default]), UsedName(compose,[Default]), UsedName(csp;Domain;init;,[Default]), UsedName(canEqual,[Default]), UsedName(##,[Default]), UsedName(productArity,[Default]))) invalidates 1 classes due to The csp.Domain has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(unapply,[Default]), UsedName(notify,[Default]), UsedName(!=,[Default]), UsedName(hashCode,[Default]), UsedName($init$,[Default]), UsedName(productElementNames,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(synchronized,[Default]), UsedName(andThen,[Default]), UsedName(productElement,[Default]), UsedName(productElementName,[Default]), UsedName(copy$default$1,[Default]), UsedName(finalize,[Default]), UsedName(Domain,[Default]), UsedName(toString,[Default]), UsedName(apply,[Default]), UsedName(productIterator,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(values,[Default]), UsedName(copy,[Default]), UsedName(productPrefix,[Default]), UsedName(compose,[Default]), UsedName(csp;Domain;init;,[Default]), UsedName(canEqual,[Default]), UsedName(##,[Default]), UsedName(productArity,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(csp.Domain)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from sv.Random.ConstraintBlock...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: sv.Random.ConstraintBlock[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(sv.Random.ConstraintBlock)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(sv.Random.ConstraintBlock,ModifiedNames(changes = UsedName(notify,[Default]), UsedName(enable,[Default]), UsedName(!=,[Default]), UsedName(hashCode,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(synchronized,[Default]), UsedName(finalize,[Default]), UsedName(sv;Random;ConstraintBlock;init;,[Default]), UsedName(toString,[Default]), UsedName(constraints,[Default]), UsedName(r,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(ConstraintBlock,[Default]), UsedName(disable,[Default]), UsedName(##,[Default]))) invalidates 1 classes due to The sv.Random.ConstraintBlock has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(notify,[Default]), UsedName(enable,[Default]), UsedName(!=,[Default]), UsedName(hashCode,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(synchronized,[Default]), UsedName(finalize,[Default]), UsedName(sv;Random;ConstraintBlock;init;,[Default]), UsedName(toString,[Default]), UsedName(constraints,[Default]), UsedName(r,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(ConstraintBlock,[Default]), UsedName(disable,[Default]), UsedName(##,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(sv.Random.ConstraintBlock)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from sv.SVEnumeration...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: sv.SVEnumeration[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(sv.SVEnumeration)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(sv.SVEnumeration,ModifiedNames(changes = UsedName(notify,[Default]), UsedName(!=,[Default]), UsedName(hashCode,[Default]), UsedName(domainValues,[Default]), UsedName(sv;SVEnumeration;init;,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(ValueSet,[Default]), UsedName(nextId,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(Value,[Default]), UsedName(ValueOrdering,[Implicit]), UsedName(synchronized,[Default]), UsedName(readResolve,[Default]), UsedName(finalize,[Default]), UsedName(SVEnumeration,[Default]), UsedName(toString,[Default]), UsedName(apply,[Default]), UsedName(maxId,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(values,[Default]), UsedName(Val,[Default]), UsedName(withName,[Default]), UsedName(nextName,[Default]), UsedName(##,[Default]))) invalidates 1 classes due to The sv.SVEnumeration has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ValueOrdering,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(sv.SVEnumeration)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from csp.CSP...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: csp.CSP[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(csp.CSP)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(csp.CSP,ModifiedNames(changes = UsedName(notify,[Default]), UsedName(varDomMap,[Default]), UsedName(!=,[Default]), UsedName(hashCode,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(getConstraints,[Default]), UsedName(synchronized,[Default]), UsedName(reviseArcs,[Default]), UsedName(csp;CSP;init;,[Default]), UsedName(finalize,[Default]), UsedName(CSP,[Default]), UsedName(variables,[Default]), UsedName(toString,[Default]), UsedName(removeUnary,[Default]), UsedName(constraints,[Default]), UsedName(combinationOfArcs,[Default]), UsedName(neighbors,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(restrictDomain,[Default]), UsedName(##,[Default]))) invalidates 1 classes due to The csp.CSP has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(notify,[Default]), UsedName(varDomMap,[Default]), UsedName(!=,[Default]), UsedName(hashCode,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(getConstraints,[Default]), UsedName(synchronized,[Default]), UsedName(reviseArcs,[Default]), UsedName(csp;CSP;init;,[Default]), UsedName(finalize,[Default]), UsedName(CSP,[Default]), UsedName(variables,[Default]), UsedName(toString,[Default]), UsedName(removeUnary,[Default]), UsedName(constraints,[Default]), UsedName(combinationOfArcs,[Default]), UsedName(neighbors,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(restrictDomain,[Default]), UsedName(##,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(csp.CSP)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from csp.Solution...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: csp.Solution[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(csp.Solution)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(csp.Solution,ModifiedNames(changes = UsedName(<init>$default$3,[Default]), UsedName(unapply,[Default]), UsedName(copy$default$2,[Default]), UsedName(csp,[Default]), UsedName(notify,[Default]), UsedName(seed,[Default]), UsedName(!=,[Default]), UsedName(hashCode,[Default]), UsedName(orderDomainValues,[Default]), UsedName($init$,[Default]), UsedName(backtrackingSearch,[Default]), UsedName(productElementNames,[Default]), UsedName(MAC,[Default]), UsedName(children,[Default]), UsedName(assignments,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(MAC$default$2,[Default]), UsedName(isComplete,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(backtrack$default$1,[Default]), UsedName(synchronized,[Default]), UsedName(AC_3,[Default]), UsedName(productElement,[Default]), UsedName(productElementName,[Default]), UsedName(copy$default$1,[Default]), UsedName(finalize,[Default]), UsedName(csp;Solution;init;,[Default]), UsedName(toString,[Default]), UsedName(apply,[Default]), UsedName(backtrack,[Default]), UsedName(isConsistent,[Default]), UsedName(isArcConsistent,[Default]), UsedName(tupled,[Default]), UsedName(productIterator,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(copy,[Default]), UsedName(productPrefix,[Default]), UsedName(selectUnassignedVar,[Default]), UsedName(inference,[Default]), UsedName(apply$default$3,[Default]), UsedName(Solution,[Default]), UsedName(curried,[Default]), UsedName(canEqual,[Default]), UsedName(##,[Default]), UsedName(revise,[Default]), UsedName(copy$default$3,[Default]), UsedName(productArity,[Default]))) invalidates 1 classes due to The csp.Solution has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(<init>$default$3,[Default]), UsedName(unapply,[Default]), UsedName(copy$default$2,[Default]), UsedName(csp,[Default]), UsedName(notify,[Default]), UsedName(seed,[Default]), UsedName(!=,[Default]), UsedName(hashCode,[Default]), UsedName(orderDomainValues,[Default]), UsedName($init$,[Default]), UsedName(backtrackingSearch,[Default]), UsedName(productElementNames,[Default]), UsedName(MAC,[Default]), UsedName(children,[Default]), UsedName(assignments,[Default]), UsedName(ne,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(asInstanceOf,[Default]), UsedName(==,[Default]), UsedName(MAC$default$2,[Default]), UsedName(isComplete,[Default]), UsedName(getClass,[Default]), UsedName(notifyAll,[Default]), UsedName(backtrack$default$1,[Default]), UsedName(synchronized,[Default]), UsedName(AC_3,[Default]), UsedName(productElement,[Default]), UsedName(productElementName,[Default]), UsedName(copy$default$1,[Default]), UsedName(finalize,[Default]), UsedName(csp;Solution;init;,[Default]), UsedName(toString,[Default]), UsedName(apply,[Default]), UsedName(backtrack,[Default]), UsedName(isConsistent,[Default]), UsedName(isArcConsistent,[Default]), UsedName(tupled,[Default]), UsedName(productIterator,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(copy,[Default]), UsedName(productPrefix,[Default]), UsedName(selectUnassignedVar,[Default]), UsedName(inference,[Default]), UsedName(apply$default$3,[Default]), UsedName(Solution,[Default]), UsedName(curried,[Default]), UsedName(canEqual,[Default]), UsedName(##,[Default]), UsedName(revise,[Default]), UsedName(copy$default$3,[Default]), UsedName(productArity,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(csp.Solution)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mNew invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: [0m
[0m[[0m[0mdebug[0m] [0m[0mPreviously invalidated, but (transitively) depend on new invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNo classes were invalidated.[0m
